/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package com.inscada.migrator;

import java.text.DateFormat;
import java.text.SimpleDateFormat;
import java.util.Calendar;
import java.util.Date;
import javax.swing.ButtonGroup;
import javax.swing.ImageIcon;
import javax.swing.JSpinner;
import javax.swing.SpinnerDateModel;

/**
 *
 * @author fadime
 */
public class App extends javax.swing.JFrame {

    String endTime;
    String startDate;
    String starTime;
    String endDate;
    

    /**
     * Creates new form App
     */
    public App() {
        initComponents();
        setResizable(false);
        ImageIcon imageIcon = new ImageIcon("C:\\Users\\DELL\\finishProject\\migrator\\src\\main\\resources\\inscada1.png");
        jLabel2.setIcon(imageIcon);
        ButtonGroup bt = new ButtonGroup();
        bt.add(event_log);
        bt.add(read_variable_values);
        bt.add(fired_alarm);
        transfer.setVisible(false);
        progressBar.setStringPainted(true);
        progressBar2.setStringPainted(true);
        progressBar3.setStringPainted(true);
        setSize(986, 609);
        setLocation((WIDTH + 230) / 2, (HEIGHT + 50) / 2);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jInternalFrame1 = new javax.swing.JInternalFrame();
        jProgressBar1 = new javax.swing.JProgressBar();
        jProgressBar2 = new javax.swing.JProgressBar();
        sql_panel = new javax.swing.JPanel();
        text_sql_host = new javax.swing.JLabel();
        text_sql_port = new javax.swing.JLabel();
        sql_port = new javax.swing.JTextField();
        text_sql_username = new javax.swing.JLabel();
        text_sql_password = new javax.swing.JLabel();
        sql_username = new javax.swing.JTextField();
        sql_host = new javax.swing.JTextField();
        sql_password = new javax.swing.JPasswordField();
        text_sql_dbname = new javax.swing.JLabel();
        sql_dbname = new javax.swing.JTextField();
        text_influxdb_host = new javax.swing.JLabel();
        influxdb_host = new javax.swing.JTextField();
        text_influxdb_port = new javax.swing.JLabel();
        influxdb_port = new javax.swing.JTextField();
        connected = new javax.swing.JButton();
        textMessage = new javax.swing.JLabel();
        jPanel2 = new javax.swing.JPanel();
        jLabel2 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        event_log = new javax.swing.JCheckBox();
        read_variable_values = new javax.swing.JCheckBox();
        transfer = new javax.swing.JButton();
        progressBar = new javax.swing.JProgressBar();
        progressBar2 = new javax.swing.JProgressBar();
        progressBar3 = new javax.swing.JProgressBar();
        textMessage2 = new javax.swing.JLabel();
        Date date1 = new Date();
        SpinnerDateModel sm1 =
        new SpinnerDateModel(date1, null, null, Calendar.HOUR_OF_DAY);
        endtime = new javax.swing.JSpinner(sm1);
        startdate = new org.jdesktop.swingx.JXDatePicker();
        enddate = new org.jdesktop.swingx.JXDatePicker();
        Date date2 = new Date();
        SpinnerDateModel sm2 =
        new SpinnerDateModel(date2, null, null, Calendar.HOUR_OF_DAY);
        starttime1 = new javax.swing.JSpinner(sm2);
        startdate1 = new org.jdesktop.swingx.JXDatePicker();
        Date date3 = new Date();
        SpinnerDateModel sm3 =
        new SpinnerDateModel(date3, null, null, Calendar.HOUR_OF_DAY);
        endtime1 = new javax.swing.JSpinner(sm3);
        Date date4 = new Date();
        SpinnerDateModel sm4 =
        new SpinnerDateModel(date4, null, null, Calendar.HOUR_OF_DAY);
        starttime2 = new javax.swing.JSpinner(sm4);
        enddate2 = new org.jdesktop.swingx.JXDatePicker();
        Date date5 = new Date();
        SpinnerDateModel sm5 =
        new SpinnerDateModel(date5, null, null, Calendar.HOUR_OF_DAY);
        endtime2 = new javax.swing.JSpinner(sm5);
        jLabel1 = new javax.swing.JLabel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        enddate1 = new org.jdesktop.swingx.JXDatePicker();
        startdate2 = new org.jdesktop.swingx.JXDatePicker();
        Date date = new Date();
        SpinnerDateModel sm =
        new SpinnerDateModel(date, null, null, Calendar.HOUR_OF_DAY);
        starttime = new javax.swing.JSpinner(sm);
        fired_alarm = new javax.swing.JCheckBox();
        batchSize = new javax.swing.JTextField();
        thread = new javax.swing.JTextField();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();

        jInternalFrame1.setVisible(true);

        javax.swing.GroupLayout jInternalFrame1Layout = new javax.swing.GroupLayout(jInternalFrame1.getContentPane());
        jInternalFrame1.getContentPane().setLayout(jInternalFrame1Layout);
        jInternalFrame1Layout.setHorizontalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );
        jInternalFrame1Layout.setVerticalGroup(
            jInternalFrame1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 0, Short.MAX_VALUE)
        );

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        getContentPane().setLayout(new org.netbeans.lib.awtextra.AbsoluteLayout());

        sql_panel.setBackground(new java.awt.Color(36, 47, 65));

        text_sql_host.setBackground(new java.awt.Color(0, 0, 0));
        text_sql_host.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_sql_host.setForeground(new java.awt.Color(204, 204, 204));
        text_sql_host.setText(" POSTGRESQL HOST :");

        text_sql_port.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_sql_port.setForeground(new java.awt.Color(204, 204, 204));
        text_sql_port.setText(" POSTGRESQL PORT:");

        sql_port.setBackground(new java.awt.Color(36, 47, 65));
        sql_port.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        sql_port.setForeground(new java.awt.Color(204, 204, 204));
        sql_port.setText("enter your postgreSQL port");
        sql_port.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        sql_port.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sql_portMouseClicked(evt);
            }
        });

        text_sql_username.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_sql_username.setForeground(new java.awt.Color(204, 204, 204));
        text_sql_username.setText(" POSTGRESQL USER NAME:");

        text_sql_password.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_sql_password.setForeground(new java.awt.Color(204, 204, 204));
        text_sql_password.setText(" POSTGRESQL PASSWORD:");

        sql_username.setBackground(new java.awt.Color(36, 47, 65));
        sql_username.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        sql_username.setForeground(new java.awt.Color(204, 204, 204));
        sql_username.setText("enter your postgreSQL user name");
        sql_username.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        sql_username.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sql_usernameMouseClicked(evt);
            }
        });

        sql_host.setBackground(new java.awt.Color(36, 47, 65));
        sql_host.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        sql_host.setForeground(new java.awt.Color(204, 204, 204));
        sql_host.setText("enter your postgreSQL host");
        sql_host.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        sql_host.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sql_hostMouseClicked(evt);
            }
        });
        sql_host.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                sql_hostActionPerformed(evt);
            }
        });

        sql_password.setBackground(new java.awt.Color(36, 47, 65));
        sql_password.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        sql_password.setForeground(new java.awt.Color(204, 204, 204));
        sql_password.setText("1234567812345");
        sql_password.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        sql_password.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sql_passwordMouseClicked(evt);
            }
        });

        text_sql_dbname.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_sql_dbname.setForeground(new java.awt.Color(204, 204, 204));
        text_sql_dbname.setText(" POSTGRESQL DB NAME:");

        sql_dbname.setBackground(new java.awt.Color(36, 47, 65));
        sql_dbname.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        sql_dbname.setForeground(new java.awt.Color(204, 204, 204));
        sql_dbname.setText("enter your postgreSQL database name");
        sql_dbname.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        sql_dbname.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                sql_dbnameMouseClicked(evt);
            }
        });

        text_influxdb_host.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_influxdb_host.setForeground(new java.awt.Color(204, 204, 204));
        text_influxdb_host.setText(" INFLUXDB HOST:");

        influxdb_host.setBackground(new java.awt.Color(36, 47, 65));
        influxdb_host.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        influxdb_host.setForeground(new java.awt.Color(204, 204, 204));
        influxdb_host.setText("enter your InfluxDB host");
        influxdb_host.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        influxdb_host.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                influxdb_hostMouseClicked(evt);
            }
        });

        text_influxdb_port.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        text_influxdb_port.setForeground(new java.awt.Color(204, 204, 204));
        text_influxdb_port.setText(" INFLUXDB PORT:");

        influxdb_port.setBackground(new java.awt.Color(36, 47, 65));
        influxdb_port.setFont(new java.awt.Font("Century Gothic", 0, 12)); // NOI18N
        influxdb_port.setForeground(new java.awt.Color(204, 204, 204));
        influxdb_port.setText("enter your InfluxDB port");
        influxdb_port.setBorder(javax.swing.BorderFactory.createMatteBorder(0, 0, 2, 0, new java.awt.Color(204, 204, 204)));
        influxdb_port.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                influxdb_portMouseClicked(evt);
            }
        });

        connected.setBackground(new java.awt.Color(102, 102, 102));
        connected.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        connected.setForeground(new java.awt.Color(204, 204, 204));
        connected.setText("CONNECTION");
        connected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                connectedActionPerformed(evt);
            }
        });

        textMessage.setBackground(new java.awt.Color(204, 0, 0));
        textMessage.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        textMessage.setForeground(new java.awt.Color(204, 0, 0));

        javax.swing.GroupLayout sql_panelLayout = new javax.swing.GroupLayout(sql_panel);
        sql_panel.setLayout(sql_panelLayout);
        sql_panelLayout.setHorizontalGroup(
            sql_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sql_panelLayout.createSequentialGroup()
                .addGap(60, 60, 60)
                .addGroup(sql_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(sql_panelLayout.createSequentialGroup()
                        .addGroup(sql_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(text_sql_port, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(text_sql_host, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sql_host)
                            .addComponent(sql_password)
                            .addComponent(sql_port, javax.swing.GroupLayout.DEFAULT_SIZE, 72, Short.MAX_VALUE)
                            .addComponent(text_sql_password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sql_dbname, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                            .addComponent(text_sql_dbname, javax.swing.GroupLayout.PREFERRED_SIZE, 64, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addContainerGap(125, Short.MAX_VALUE))
                    .addGroup(sql_panelLayout.createSequentialGroup()
                        .addGroup(sql_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(textMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 278, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(text_sql_username, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(sql_username)
                            .addComponent(influxdb_port, javax.swing.GroupLayout.DEFAULT_SIZE, 262, Short.MAX_VALUE)
                            .addComponent(text_influxdb_port, javax.swing.GroupLayout.PREFERRED_SIZE, 123, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(influxdb_host)
                            .addComponent(text_influxdb_host, javax.swing.GroupLayout.PREFERRED_SIZE, 134, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(0, 32, Short.MAX_VALUE))))
            .addGroup(sql_panelLayout.createSequentialGroup()
                .addGap(90, 90, 90)
                .addComponent(connected, javax.swing.GroupLayout.PREFERRED_SIZE, 180, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        sql_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {sql_dbname, sql_host, sql_password, sql_port, sql_username});

        sql_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {influxdb_host, influxdb_port});

        sql_panelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {text_sql_dbname, text_sql_host, text_sql_password, text_sql_port, text_sql_username});

        sql_panelLayout.setVerticalGroup(
            sql_panelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(sql_panelLayout.createSequentialGroup()
                .addGap(32, 32, 32)
                .addComponent(text_sql_host, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sql_host, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_sql_port, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sql_port, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_sql_username, javax.swing.GroupLayout.PREFERRED_SIZE, 24, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sql_username, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_sql_password, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sql_password, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_sql_dbname, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(sql_dbname, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(41, 41, 41)
                .addComponent(text_influxdb_host, javax.swing.GroupLayout.PREFERRED_SIZE, 23, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(influxdb_host, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(text_influxdb_port, javax.swing.GroupLayout.PREFERRED_SIZE, 27, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(influxdb_port, javax.swing.GroupLayout.PREFERRED_SIZE, 20, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(textMessage, javax.swing.GroupLayout.PREFERRED_SIZE, 26, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(connected, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(14, Short.MAX_VALUE))
        );

        sql_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {text_sql_dbname, text_sql_password});

        sql_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {text_influxdb_host, text_influxdb_port});

        sql_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {sql_dbname, sql_host, sql_password, sql_port, sql_username});

        sql_panelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {influxdb_host, influxdb_port});

        getContentPane().add(sql_panel, new org.netbeans.lib.awtextra.AbsoluteConstraints(280, 0, 370, 580));

        jPanel2.setBackground(new java.awt.Color(0, 204, 204));
        jPanel2.setForeground(new java.awt.Color(0, 0, 102));

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jLabel2, javax.swing.GroupLayout.DEFAULT_SIZE, 280, Short.MAX_VALUE)
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGap(175, 175, 175)
                .addComponent(jLabel2, javax.swing.GroupLayout.PREFERRED_SIZE, 191, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(214, Short.MAX_VALUE))
        );

        getContentPane().add(jPanel2, new org.netbeans.lib.awtextra.AbsoluteConstraints(0, 0, 280, 580));

        jPanel1.setBackground(new java.awt.Color(0, 102, 102));

        event_log.setBackground(new java.awt.Color(0, 102, 102));
        event_log.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        event_log.setText(" EVENT LOG");
        event_log.setHorizontalAlignment(javax.swing.SwingConstants.TRAILING);

        read_variable_values.setBackground(new java.awt.Color(0, 102, 102));
        read_variable_values.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        read_variable_values.setText(" READ VARIABLE VALUES");

        transfer.setBackground(new java.awt.Color(102, 102, 102));
        transfer.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        transfer.setForeground(new java.awt.Color(204, 204, 204));
        transfer.setText(" TRANSFER");
        transfer.setMaximumSize(new java.awt.Dimension(125, 27));
        transfer.setMinimumSize(new java.awt.Dimension(125, 27));
        transfer.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                transferActionPerformed(evt);
            }
        });

        progressBar.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));

        textMessage2.setBackground(new java.awt.Color(204, 0, 0));
        textMessage2.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        textMessage2.setForeground(new java.awt.Color(204, 0, 0));

        JSpinner.DateEditor de1 = new JSpinner.DateEditor(endtime, "HH:mm:ss");
        endtime.setEditor(de1);

        startdate.setForeground(new java.awt.Color(0, 102, 102));

        JSpinner.DateEditor de2 = new JSpinner.DateEditor(starttime1, "HH:mm:ss");
        starttime1.setEditor(de2);

        JSpinner.DateEditor de3 = new JSpinner.DateEditor(endtime1, "HH:mm:ss");
        endtime1.setEditor(de3);

        JSpinner.DateEditor de4 = new JSpinner.DateEditor(starttime2, "HH:mm:ss");
        starttime2.setEditor(de4);

        JSpinner.DateEditor de5 = new JSpinner.DateEditor(endtime2, "HH:mm:ss");
        endtime2.setEditor(de5);

        jLabel1.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(204, 204, 204));
        jLabel1.setText(" START DATE");

        jLabel3.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel3.setForeground(new java.awt.Color(204, 204, 204));
        jLabel3.setText(" END DATE");

        jLabel4.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel4.setForeground(new java.awt.Color(204, 204, 204));
        jLabel4.setText(" START DATE");

        jLabel5.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel5.setForeground(new java.awt.Color(204, 204, 204));
        jLabel5.setText(" END DATE");

        jLabel6.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel6.setForeground(new java.awt.Color(204, 204, 204));
        jLabel6.setText(" END DATE");

        jLabel7.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel7.setForeground(new java.awt.Color(204, 204, 204));
        jLabel7.setText(" START DATE");

        JSpinner.DateEditor de = new JSpinner.DateEditor(starttime, "HH:mm:ss");
        starttime.setEditor(de);

        fired_alarm.setBackground(new java.awt.Color(0, 102, 102));
        fired_alarm.setFont(new java.awt.Font("Century Gothic", 1, 14)); // NOI18N
        fired_alarm.setText(" FIRED ALARM");

        jLabel8.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel8.setForeground(new java.awt.Color(204, 204, 204));
        jLabel8.setText(" BATCH SIZE");

        jLabel9.setFont(new java.awt.Font("Century Gothic", 1, 12)); // NOI18N
        jLabel9.setForeground(new java.awt.Color(204, 204, 204));
        jLabel9.setText(" THREAD SIZE");

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(6, 6, 6)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(event_log)
                                    .addComponent(read_variable_values)
                                    .addComponent(fired_alarm)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(72, 72, 72)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                    .addComponent(transfer, javax.swing.GroupLayout.DEFAULT_SIZE, 180, Short.MAX_VALUE)
                                    .addComponent(textMessage2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                                    .addComponent(progressBar2, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addComponent(progressBar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel5)
                                            .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel3)
                                            .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 84, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(jLabel6))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(startdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(enddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(startdate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(enddate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(startdate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(enddate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(endtime1)
                                            .addComponent(starttime2, javax.swing.GroupLayout.PREFERRED_SIZE, 67, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endtime)
                                            .addComponent(starttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(endtime2)
                                            .addComponent(starttime1, javax.swing.GroupLayout.PREFERRED_SIZE, 63, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addContainerGap()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLabel8)
                                    .addComponent(jLabel9))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                                .addComponent(thread, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))
                        .addGap(0, 0, Short.MAX_VALUE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addContainerGap()
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(progressBar3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGap(0, 0, Short.MAX_VALUE)
                                .addComponent(batchSize, javax.swing.GroupLayout.PREFERRED_SIZE, 151, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addGap(70, 70, 70))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {endtime, endtime1, endtime2, starttime, starttime1, starttime2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {enddate, enddate1, enddate2, startdate, startdate1, startdate2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {jLabel1, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7});

        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap(50, Short.MAX_VALUE)
                .addComponent(event_log)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel4, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startdate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starttime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(enddate, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endtime, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(progressBar, javax.swing.GroupLayout.PREFERRED_SIZE, 15, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(25, 25, 25)
                .addComponent(read_variable_values)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel7, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startdate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starttime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel3)
                    .addComponent(enddate1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endtime1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(30, 30, 30)
                .addComponent(fired_alarm)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(startdate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(starttime2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel6)
                    .addComponent(enddate2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(endtime2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(progressBar3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(batchSize, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel8))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(thread, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel9))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(textMessage2, javax.swing.GroupLayout.PREFERRED_SIZE, 22, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(transfer, javax.swing.GroupLayout.PREFERRED_SIZE, 46, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(20, 20, 20))
        );

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {endtime, endtime1, endtime2, starttime, starttime1, starttime2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {enddate, enddate1, enddate2, startdate, startdate1, startdate2});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {jLabel1, jLabel3, jLabel4, jLabel5, jLabel6, jLabel7});

        jPanel1Layout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {progressBar, progressBar2, progressBar3});

        getContentPane().add(jPanel1, new org.netbeans.lib.awtextra.AbsoluteConstraints(650, 0, 330, 580));

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void connectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_connectedActionPerformed
        if (!validatePostgresqlConnection() || !validateInfluxDbConnection()) {
            textMessage.setText("Please enter all required information.");
            return;
        }

        String host = influxdb_host.getText();
        Integer port = Integer.parseInt(influxdb_port.getText());
        ConnectionInfo postgresqlConnectionInfo = new ConnectionInfo(sql_host.getText(), (Integer.parseInt(sql_port.getText())), sql_dbname.getText(), sql_username.getText(), (Integer.parseInt(new String(sql_password.getPassword()))));
        ConnectionInfo influxDbConnectionInfo = new ConnectionInfo(host, port, null, null, 0);

        if (migratorImpl.testPostgresqlConnection(postgresqlConnectionInfo) && migratorImpl.testInfluxDbConnection(influxDbConnectionInfo)) {
            textMessage.setText("SUCCESSFUL CONNECTİON !");
            transfer.setVisible(true);
            connected.setVisible(false);
        } else {
            if (!migratorImpl.testInfluxDbConnection(influxDbConnectionInfo)) {
                textMessage.setText("Failed to connect to InfluxDB!");
            } else {
                textMessage.setText("Failed to connect to PostgreSQL!");
            }
        }
    }//GEN-LAST:event_connectedActionPerformed


    private void influxdb_hostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_influxdb_hostMouseClicked
        influxdb_host.setText("");
    }//GEN-LAST:event_influxdb_hostMouseClicked

    private void sql_dbnameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sql_dbnameMouseClicked
        sql_dbname.setText("");
    }//GEN-LAST:event_sql_dbnameMouseClicked

    private void sql_passwordMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sql_passwordMouseClicked
        sql_password.setText("");
    }//GEN-LAST:event_sql_passwordMouseClicked

    private void sql_hostMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sql_hostMouseClicked
        sql_host.setText("");
    }//GEN-LAST:event_sql_hostMouseClicked

    private void sql_usernameMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sql_usernameMouseClicked
        sql_username.setText("");
    }//GEN-LAST:event_sql_usernameMouseClicked

    private void sql_portMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_sql_portMouseClicked
        sql_port.setText("");
    }//GEN-LAST:event_sql_portMouseClicked

    private void influxdb_portMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_influxdb_portMouseClicked
        influxdb_port.setText("");
    }//GEN-LAST:event_influxdb_portMouseClicked

    private void transferActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_transferActionPerformed
        transfer.setEnabled(false);
        
        if (event_log.isSelected()) {
            Thread t = new Thread(new Runnable() {

                @Override
                public void run() {
                    selectEventLog();
                    migratorImpl.threadProduce(Integer.parseInt(thread.getText()), Integer.parseInt(batchSize.getText()), "event_log", "dttm", startDate + starTime, endDate + endTime);
                }
            });
            t.start();
        }
        if (fired_alarm.isSelected()) {
            Thread f = new Thread(new Runnable() {

                @Override
                public void run() {
                    selectFiredAlarm();
                    migratorImpl.threadProduce(Integer.parseInt(thread.getText()), Integer.parseInt(batchSize.getText()), "fired_alarm", "on_dttm", startDate + starTime, endDate + endTime);
                }
            });
            f.start();
        }
        if (read_variable_values.isSelected()) {
            Thread r = new Thread(new Runnable() {

                @Override
                public void run() {
                    selectVariableValue();
                    migratorImpl.threadProduce(Integer.parseInt(thread.getText()), Integer.parseInt(batchSize.getText()), "read_variable_num", "read_dttm", startDate + starTime, endDate + endTime);
                }
            });
            r.start();
        }
        if (!event_log.isSelected() && !fired_alarm.isSelected() && !read_variable_values.isSelected()) {
            textMessage2.setText("PLEASE SELECT TABLE !");
        }
    }//GEN-LAST:event_transferActionPerformed

    private void sql_hostActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_sql_hostActionPerformed
        // TODO add your handling code here:
    }//GEN-LAST:event_sql_hostActionPerformed
   
    public void transferEnabled(){
        transfer.setEnabled(true);
    }
    public void selectEventLog() {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat tf = new SimpleDateFormat("  HH:mm:ss");
        startDate = df.format(startdate.getDate());
        starTime = tf.format(starttime.getValue());
        endDate = df.format(enddate.getDate());
        endTime = tf.format(endtime.getValue());
    }

    public void selectVariableValue() {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat tf = new SimpleDateFormat("  HH:mm:ss");
        startDate = df.format(startdate1.getDate());
        starTime = tf.format(starttime1.getValue());
        endDate = df.format(enddate1.getDate());
        endTime = tf.format(endtime1.getValue());
    }

    public void selectFiredAlarm() {
        DateFormat df = new SimpleDateFormat("yyyy-MM-dd");
        DateFormat tf = new SimpleDateFormat("  HH:mm:ss");
        startDate = df.format(startdate2.getDate());
        starTime = tf.format(starttime2.getValue());
        endDate = df.format(enddate2.getDate());
        endTime = tf.format(endtime2.getValue());
    }

    private boolean validatePostgresqlConnection() {
        if (sql_port.getText() == null || sql_password.getPassword() == null || sql_dbname.getText() == null
                || sql_username.getText() == null || sql_host.getText() == null || sql_dbname.getText().isEmpty()
                || sql_port.getText().isEmpty() || sql_host.getText().isEmpty() || sql_username.getText().isEmpty()) {
            return false;
        }
        return true;
    }

    private boolean validateInfluxDbConnection() {
        if (influxdb_host.getText() == null || influxdb_host.getText().isEmpty()
                || influxdb_port.getText() == null || influxdb_port.getText().isEmpty()) {
            return false;
        }
        return true;
    }

    public void setProgress(int value) {
        this.progressBar.setValue(value);
    }

    public void setProgress3(int value) {
        this.progressBar3.setValue(value);
    }

    public void setProgress2(int value) {
        this.progressBar2.setValue(value);
    }

    private static Migrator migratorImpl;

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(App.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            @Override
            public void run() {
                App app = new App();
                migratorImpl = new MigratorImpl(app);
                app.setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField batchSize;
    private javax.swing.JButton connected;
    private org.jdesktop.swingx.JXDatePicker enddate;
    private org.jdesktop.swingx.JXDatePicker enddate1;
    private org.jdesktop.swingx.JXDatePicker enddate2;
    private javax.swing.JSpinner endtime;
    private javax.swing.JSpinner endtime1;
    private javax.swing.JSpinner endtime2;
    private javax.swing.JCheckBox event_log;
    private javax.swing.JCheckBox fired_alarm;
    private javax.swing.JTextField influxdb_host;
    private javax.swing.JTextField influxdb_port;
    private javax.swing.JInternalFrame jInternalFrame1;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JProgressBar jProgressBar2;
    private javax.swing.JProgressBar progressBar;
    private javax.swing.JProgressBar progressBar2;
    private javax.swing.JProgressBar progressBar3;
    private javax.swing.JCheckBox read_variable_values;
    private javax.swing.JTextField sql_dbname;
    private javax.swing.JTextField sql_host;
    private javax.swing.JPanel sql_panel;
    private javax.swing.JPasswordField sql_password;
    private javax.swing.JTextField sql_port;
    private javax.swing.JTextField sql_username;
    private org.jdesktop.swingx.JXDatePicker startdate;
    private org.jdesktop.swingx.JXDatePicker startdate1;
    private org.jdesktop.swingx.JXDatePicker startdate2;
    private javax.swing.JSpinner starttime;
    private javax.swing.JSpinner starttime1;
    private javax.swing.JSpinner starttime2;
    private javax.swing.JLabel textMessage;
    private javax.swing.JLabel textMessage2;
    private javax.swing.JLabel text_influxdb_host;
    private javax.swing.JLabel text_influxdb_port;
    private javax.swing.JLabel text_sql_dbname;
    private javax.swing.JLabel text_sql_host;
    private javax.swing.JLabel text_sql_password;
    private javax.swing.JLabel text_sql_port;
    private javax.swing.JLabel text_sql_username;
    private javax.swing.JTextField thread;
    private javax.swing.JButton transfer;
    // End of variables declaration//GEN-END:variables
}
